datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_WRITE")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                    String                                  @id @default(uuid())
  email                                 String                                  @unique
  password                              String
  name                                  String?
  facebookId                            String?                                 @unique
  googleId                              String?                                 @unique
  profilePicture                        File?
  verified                              Boolean                                 @default(false)
  notificationsReceived                 Notification[]                          @relation(name: "UserNotificationsReceived")
  refreshTokens                         RefreshToken[]
  notificationsSent                     Notification[]                          @relation("UserNotificationsSent")
  country                               Country?                                @relation(name: "UserCountries", fields: [countryName], references: [name])
  countryName                           String?
  treeDataCareDifficultyVotes           TreeDataCareDifficultyVote[]            @relation("UserTreeDataCareDifficultyVote")
  treeDataCareWaterVotes                TreeDataCareWaterVote[]                 @relation("UserTreeDataCareWaterVote")
  treeDataCareSunlightVotes             TreeDataCareSunlightVote[]              @relation("UserTreeDataCareSunlightVote")
  treeDataCarePlantingVotes             TreeDataCarePlantingVote[]              @relation("UserTreeDataCarePlantingVote")
  treeDataCareObtainingSeedsContents    TreeDataCareObtainingSeedsContent[]     @relation("UserTreeDataCareObtainingSeedsContent")
  treeDataCareObtainingSeedsVotes       TreeDataCareObtainingSeedsVote[]        @relation("UserTreeDataCareObtainingSeedsVote")
  treeDataCareHowToPlantSeedsContents   TreeDataCareHowToPlantSeedsContent[]    @relation("UserTreeDataCareHowToPlantSeedsContent")
  treeDataCareHowToPlantSeedsVotes      TreeDataCareHowToPlantSeedsVote[]       @relation("UserTreeDataCareHowToPlantSeedsVote")
  treeDataCareWhenToReleaseVotes        TreeDataCareWhenToReleaseVote[]         @relation("UserTreeDataCareWhenToReleaseVote")
  treeDataCareGerminationDifficultyVote TreeDataCareGerminationDifficultyVote[] @relation("UserTreeDataCareGerminationDifficultyVote")
  treeDataCareGerminationNotesContent   TreeDataCareGerminationNotesContent[]   @relation("UserTreeDataCareGerminationNotesContent")
  treeDataCareGerminationNotesVote      TreeDataCareGerminationNotesVote[]      @relation("UserTreeDataCareGerminationNotesVote")
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime                                @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  sessionId String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expires   DateTime
}

model File {
  id     String @id @default(uuid())
  author User   @relation(fields: [userId], references: [id])
  mime   String
  path   String
  userId String
}

model Notification {
  id         String                    @id @default(uuid())
  type       NOTIFICATION_TYPE
  message    String
  onOpenType NOTIFICATION_ON_OPEN_TYPE
  receiver   User                      @relation(name: "UserNotificationsReceived", fields: [receiverId], references: [id])
  receiverId String
  sender     User                      @relation(name: "UserNotificationsSent", fields: [senderId], references: [id])
  senderId   String
  readDate   DateTime?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
}

enum NOTIFICATION_TYPE {
  PASSWORD_CHANGED
}

enum NOTIFICATION_ON_OPEN_TYPE {
  SOME_TYPE_TO_OPEN
}

model Country {
  name  String     @id
  trees TreeData[] @relation("TreeDataCountries")
  users User[]     @relation("UserCountries")
}

model TreeData {
  id                            Int                                     @id
  taxon                         String
  family                        String
  author                        String?
  source                        String?
  countries                     Country[]                               @relation("TreeDataCountries")
  careDifficultyVotes           TreeDataCareDifficultyVote[]            @relation("TreeDataCareDifficultyVotes")
  careWaterVotes                TreeDataCareWaterVote[]                 @relation("TreeDataCareWaterVotes")
  careSunlightVotes             TreeDataCareSunlightVote[]              @relation("TreeDataCareSunlightVotes")
  carePlantingVotes             TreeDataCarePlantingVote[]              @relation("TreeDataCarePlantingVotes")
  careObtainingSeedsContents    TreeDataCareObtainingSeedsContent[]     @relation("TreeDataCareObtainingSeedsContents")
  careObtainingSeedsVotes       TreeDataCareObtainingSeedsVote[]        @relation("TreeDataCareObtainingSeedsVotes")
  careHowToPlantSeedsContents   TreeDataCareHowToPlantSeedsContent[]    @relation("TreeDataCareHowToPlantSeedsContents")
  careHowToPlantSeedsVotes      TreeDataCareHowToPlantSeedsVote[]       @relation("TreeDataCareHowToPlantSeedsVotes")
  careWhenToReleaseVotes        TreeDataCareWhenToReleaseVote[]         @relation("TreeDataCareWhenToReleaseVotes")
  careGerminationDifficultyVote TreeDataCareGerminationDifficultyVote[] @relation("TreeDataCareGerminationDifficultyVotes")
  careGerminationNotesContent   TreeDataCareGerminationNotesContent[]   @relation("TreeDataCareGerminationNotesContents")
  careGerminationNotesVote      TreeDataCareGerminationNotesVote[]      @relation("TreeDataCareGerminationNotesVotes")
}

model TreeDataCareDifficultyVote {
  id         String                    @id @default(uuid())
  treeData   TreeData                  @relation(name: "TreeDataCareDifficultyVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                      @relation(name: "UserTreeDataCareDifficultyVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_DIFFICULTY_TYPE

  @@unique([userId, treeDataId])
}

enum TREE_CARE_DIFFICULTY_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCareWaterVote {
  id         String               @id @default(uuid())
  treeData   TreeData             @relation(name: "TreeDataCareWaterVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                 @relation(name: "UserTreeDataCareWaterVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_WATER_TYPE

  @@unique([userId, treeDataId])
}

enum TREE_CARE_WATER_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCareSunlightVote {
  id         String                  @id @default(uuid())
  treeData   TreeData                @relation(name: "TreeDataCareSunlightVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                    @relation(name: "UserTreeDataCareSunlightVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_SUNLIGHT_TYPE

  @@unique([userId, treeDataId])
}

enum TREE_CARE_SUNLIGHT_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCarePlantingVote {
  id          String   @id @default(uuid())
  treeData    TreeData @relation(name: "TreeDataCarePlantingVotes", fields: [treeDataId], references: [id])
  treeDataId  Int
  user        User     @relation(name: "UserTreeDataCarePlantingVote", fields: [userId], references: [id])
  userId      String
  monthsStart Int
  monthsEnd   Int

  @@unique([userId, treeDataId])
}

model TreeDataCareObtainingSeedsContent {
  id         String                           @id @default(uuid())
  treeData   TreeData                         @relation(name: "TreeDataCareObtainingSeedsContents", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                             @relation(name: "UserTreeDataCareObtainingSeedsContent", fields: [userId], references: [id])
  userId     String
  votes      TreeDataCareObtainingSeedsVote[] @relation(name: "TreeDataCareObtainingSeedsContentToVotes")

  @@unique([userId, treeDataId])
}

model TreeDataCareObtainingSeedsVote {
  id         String                            @id @default(uuid())
  content    TreeDataCareObtainingSeedsContent @relation(name: "TreeDataCareObtainingSeedsContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                          @relation(name: "TreeDataCareObtainingSeedsVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                              @relation(name: "UserTreeDataCareObtainingSeedsVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareHowToPlantSeedsContent {
  id         String                            @id @default(uuid())
  treeData   TreeData                          @relation(name: "TreeDataCareHowToPlantSeedsContents", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                              @relation(name: "UserTreeDataCareHowToPlantSeedsContent", fields: [userId], references: [id])
  userId     String
  votes      TreeDataCareHowToPlantSeedsVote[] @relation(name: "TreeDataCareHowToPlantSeedsContentToVotes")

  @@unique([userId, treeDataId])
}

model TreeDataCareHowToPlantSeedsVote {
  id         String                             @id @default(uuid())
  content    TreeDataCareHowToPlantSeedsContent @relation(name: "TreeDataCareHowToPlantSeedsContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                           @relation(name: "TreeDataCareHowToPlantSeedsVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                               @relation(name: "UserTreeDataCareHowToPlantSeedsVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareGerminationDifficultyVote {
  id         String                                @id @default(uuid())
  treeData   TreeData                              @relation(name: "TreeDataCareGerminationDifficultyVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                                  @relation(name: "UserTreeDataCareGerminationDifficultyVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_GERMINATION_DIFFICULTY_TYPE

  @@unique([userId, treeDataId])
}

enum TREE_CARE_GERMINATION_DIFFICULTY_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCareGerminationNotesContent {
  id         String                             @id @default(uuid())
  treeData   TreeData                           @relation(name: "TreeDataCareGerminationNotesContents", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                               @relation(name: "UserTreeDataCareGerminationNotesContent", fields: [userId], references: [id])
  userId     String
  votes      TreeDataCareGerminationNotesVote[] @relation(name: "TreeDataCareGerminationNotesContentToVotes")

  @@unique([userId, treeDataId])
}

model TreeDataCareGerminationNotesVote {
  id         String                              @id @default(uuid())
  content    TreeDataCareGerminationNotesContent @relation(name: "TreeDataCareGerminationNotesContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                            @relation(name: "TreeDataCareGerminationNotesVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                                @relation(name: "UserTreeDataCareGerminationNotesVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareWhenToReleaseVote {
  id          String   @id @default(uuid())
  treeData    TreeData @relation(name: "TreeDataCareWhenToReleaseVotes", fields: [treeDataId], references: [id])
  treeDataId  Int
  user        User     @relation(name: "UserTreeDataCareWhenToReleaseVote", fields: [userId], references: [id])
  userId      String
  monthsStart Int
  monthsEnd   Int

  @@unique([userId, treeDataId])
}

model Tree {
  id String @id @default(uuid())
}
