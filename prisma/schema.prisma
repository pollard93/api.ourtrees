datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_WRITE")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                    String                                  @id @default(uuid())
  email                                 String                                  @unique
  password                              String
  name                                  String?
  facebookId                            String?                                 @unique
  googleId                              String?                                 @unique
  profilePicture                        File?
  verified                              Boolean                                 @default(false)
  notificationsReceived                 Notification[]                          @relation(name: "UserNotificationsReceived")
  refreshTokens                         RefreshToken[]
  notificationsSent                     Notification[]                          @relation("UserNotificationsSent")
  country                               Country?                                @relation(name: "UserCountries", fields: [countryName], references: [name])
  countryName                           String?
  treeDataCareDifficultyVotes           TreeDataCareDifficultyVote[]            @relation("UserTreeDataCareDifficultyVote")
  treeDataCareWaterVotes                TreeDataCareWaterVote[]                 @relation("UserTreeDataCareWaterVote")
  treeDataCareSunlightVotes             TreeDataCareSunlightVote[]              @relation("UserTreeDataCareSunlightVote")
  treeDataCarePlantingVotes             TreeDataCarePlantingVote[]              @relation("UserTreeDataCarePlantingVote")
  treeDataCareObtainingSeedsContents    TreeDataCareObtainingSeedsContent[]     @relation("UserTreeDataCareObtainingSeedsContent")
  treeDataCareObtainingSeedsVotes       TreeDataCareObtainingSeedsVote[]        @relation("UserTreeDataCareObtainingSeedsVote")
  treeDataCareHowToPlantSeedsContents   TreeDataCareHowToPlantSeedsContent[]    @relation("UserTreeDataCareHowToPlantSeedsContent")
  treeDataCareHowToPlantSeedsVotes      TreeDataCareHowToPlantSeedsVote[]       @relation("UserTreeDataCareHowToPlantSeedsVote")
  treeDataCareWhenToReleaseVotes        TreeDataCareWhenToReleaseVote[]         @relation("UserTreeDataCareWhenToReleaseVote")
  treeDataCareGerminationDifficultyVote TreeDataCareGerminationDifficultyVote[] @relation("UserTreeDataCareGerminationDifficultyVote")
  treeDataCareGerminationNotesContent   TreeDataCareGerminationNotesContent[]   @relation("UserTreeDataCareGerminationNotesContent")
  treeDataCareGerminationNotesVote      TreeDataCareGerminationNotesVote[]      @relation("UserTreeDataCareGerminationNotesVote")
  treesCreated                          Tree[]                                  @relation("UserTreesCreated")
  treesFollowing                        Tree[]                                  @relation("UserTreesFollowing")
  treeComments                          TreeComment[]
  treeEntryComments                     TreeEntryComment[]
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime                                @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  sessionId String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expires   DateTime
}

model File {
  id          String     @id @default(uuid())
  author      User       @relation(fields: [userId], references: [id])
  userId      String
  treeEntry   TreeEntry? @relation(fields: [treeEntryId], references: [id])
  treeEntryId String
  mime        String
  path        String
}

model Notification {
  id         String                    @id @default(uuid())
  type       NOTIFICATION_TYPE
  message    String
  onOpenType NOTIFICATION_ON_OPEN_TYPE
  receiver   User                      @relation(name: "UserNotificationsReceived", fields: [receiverId], references: [id])
  receiverId String
  sender     User                      @relation(name: "UserNotificationsSent", fields: [senderId], references: [id])
  senderId   String
  readDate   DateTime?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
}

enum NOTIFICATION_TYPE {
  PASSWORD_CHANGED
}

enum NOTIFICATION_ON_OPEN_TYPE {
  SOME_TYPE_TO_OPEN
}

model Country {
  name  String     @id
  trees TreeData[] @relation("TreeDataCountries")
  users User[]     @relation("UserCountries")
}

model TreeData {
  id                                        Int                                     @id
  taxon                                     String
  family                                    String
  author                                    String?
  source                                    String?
  countries                                 Country[]                               @relation("TreeDataCountries")
  careDifficultyVotes                       TreeDataCareDifficultyVote[]            @relation("TreeDataCareDifficultyVotes")
  careDifficultyResult                      TreeDataCareDifficultyResult            @relation(name: "TreeDataCareDifficultyResult", fields: [treeDataCareDifficultyResultId], references: [id])
  treeDataCareDifficultyResultId            String                                  @unique
  careWaterVotes                            TreeDataCareWaterVote[]                 @relation("TreeDataCareWaterVotes")
  careWaterResult                           TreeDataCareWaterResult                 @relation(name: "TreeDataCareWaterResult", fields: [treeDataCareWaterResultId], references: [id])
  treeDataCareWaterResultId                 String                                  @unique
  careSunlightVotes                         TreeDataCareSunlightVote[]              @relation("TreeDataCareSunlightVotes")
  careSunlightResult                        TreeDataCareSunlightResult              @relation(name: "TreeDataCareSunlightResult", fields: [treeDataCareSunlightResultId], references: [id])
  treeDataCareSunlightResultId              String                                  @unique
  carePlantingVotes                         TreeDataCarePlantingVote[]              @relation("TreeDataCarePlantingVotes")
  carePlantingResult                        TreeDataCarePlantingResult              @relation(name: "TreeDataCarePlantingResult", fields: [treeDataCarePlantingResultId], references: [id])
  treeDataCarePlantingResultId              String                                  @unique
  careObtainingSeedsContents                TreeDataCareObtainingSeedsContent[]     @relation("TreeDataCareObtainingSeedsContents")
  careObtainingSeedsVotes                   TreeDataCareObtainingSeedsVote[]        @relation("TreeDataCareObtainingSeedsVotes")
  careObtainingSeedsResult                  TreeDataCareObtainingSeedsResult        @relation(name: "TreeDataCareObtainingSeedsResult", fields: [treeDataCareObtainingSeedsResultId], references: [id])
  treeDataCareObtainingSeedsResultId        String                                  @unique
  careHowToPlantSeedsContents               TreeDataCareHowToPlantSeedsContent[]    @relation("TreeDataCareHowToPlantSeedsContents")
  careHowToPlantSeedsVotes                  TreeDataCareHowToPlantSeedsVote[]       @relation("TreeDataCareHowToPlantSeedsVotes")
  careHowToPlantSeedsResult                 TreeDataCareHowToPlantSeedsResult       @relation(name: "TreeDataCareHowToPlantSeedsResult", fields: [treeDataCareHowToPlantSeedsResultId], references: [id])
  treeDataCareHowToPlantSeedsResultId       String                                  @unique
  careWhenToReleaseVotes                    TreeDataCareWhenToReleaseVote[]         @relation("TreeDataCareWhenToReleaseVotes")
  careWhenToReleaseResult                   TreeDataCareWhenToReleaseResult         @relation(name: "TreeDataCareWhenToReleaseResult", fields: [treeDataCareWhenToReleaseResultId], references: [id])
  treeDataCareWhenToReleaseResultId         String                                  @unique
  careGerminationDifficultyVote             TreeDataCareGerminationDifficultyVote[] @relation("TreeDataCareGerminationDifficultyVotes")
  careGerminationDifficultyResult           TreeDataCareGerminationDifficultyResult @relation(name: "TreeDataCareGerminationDifficultyResult", fields: [treeDataCareGerminationDifficultyResultId], references: [id])
  treeDataCareGerminationDifficultyResultId String                                  @unique
  careGerminationNotesContents              TreeDataCareGerminationNotesContent[]   @relation("TreeDataCareGerminationNotesContents")
  careGerminationNotesVote                  TreeDataCareGerminationNotesVote[]      @relation("TreeDataCareGerminationNotesVotes")
  careGerminationNotesResult                TreeDataCareGerminationNotesResult      @relation(name: "TreeDataCareGerminationNotesResult", fields: [treeDataCareGerminationNotesResultId], references: [id])
  treeDataCareGerminationNotesResultId      String                                  @unique
  trees                                     Tree[]                                  @relation("TreeDataToTrees")
}

model TreeDataCareDifficultyVote {
  id         String                    @id @default(uuid())
  treeData   TreeData                  @relation(name: "TreeDataCareDifficultyVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                      @relation(name: "UserTreeDataCareDifficultyVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_DIFFICULTY_TYPE

  @@unique([userId, treeDataId])
}

model TreeDataCareDifficultyResult {
  id       String    @id @default(uuid())
  treeData TreeData? @relation(name: "TreeDataCareDifficultyResult")
  count    Int
  easy     Int
  moderate Int
  hard     Int
}

enum TREE_CARE_DIFFICULTY_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCareWaterVote {
  id         String               @id @default(uuid())
  treeData   TreeData             @relation(name: "TreeDataCareWaterVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                 @relation(name: "UserTreeDataCareWaterVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_WATER_TYPE

  @@unique([userId, treeDataId])
}

model TreeDataCareWaterResult {
  id        String    @id @default(uuid())
  treeData  TreeData? @relation(name: "TreeDataCareWaterResult")
  count     Int
  weekly    Int
  biweekly  Int
  triweekly Int
}

enum TREE_CARE_WATER_TYPE {
  WEEKLY
  BIWEEKLY
  TRIWEEKLY
}

model TreeDataCareSunlightVote {
  id         String                  @id @default(uuid())
  treeData   TreeData                @relation(name: "TreeDataCareSunlightVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                    @relation(name: "UserTreeDataCareSunlightVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_SUNLIGHT_TYPE

  @@unique([userId, treeDataId])
}

model TreeDataCareSunlightResult {
  id       String    @id @default(uuid())
  treeData TreeData? @relation(name: "TreeDataCareSunlightResult")
  count    Int
  indirect Int
  partial  Int
  direct   Int
}

enum TREE_CARE_SUNLIGHT_TYPE {
  INDIRECT
  PARTIAL
  DIRECT
}

model TreeDataCarePlantingVote {
  id         String   @id @default(uuid())
  treeData   TreeData @relation(name: "TreeDataCarePlantingVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User     @relation(name: "UserTreeDataCarePlantingVote", fields: [userId], references: [id])
  userId     String
  jan        Boolean
  feb        Boolean
  mar        Boolean
  apr        Boolean
  may        Boolean
  jun        Boolean
  jul        Boolean
  aug        Boolean
  sep        Boolean
  oct        Boolean
  nov        Boolean
  dec        Boolean

  @@unique([userId, treeDataId])
}

model TreeDataCarePlantingResult {
  id       String    @id @default(uuid())
  treeData TreeData? @relation(name: "TreeDataCarePlantingResult")
  count    Int
  jan      Int
  feb      Int
  mar      Int
  apr      Int
  may      Int
  jun      Int
  jul      Int
  aug      Int
  sep      Int
  oct      Int
  nov      Int
  dec      Int
}

model TreeDataCareObtainingSeedsContent {
  id                               String                             @id @default(uuid())
  treeData                         TreeData                           @relation(name: "TreeDataCareObtainingSeedsContents", fields: [treeDataId], references: [id])
  treeDataId                       Int
  user                             User                               @relation(name: "UserTreeDataCareObtainingSeedsContent", fields: [userId], references: [id])
  userId                           String
  content                          String
  votes                            TreeDataCareObtainingSeedsVote[]   @relation(name: "TreeDataCareObtainingSeedsContentToVotes")
  treeDataCareObtainingSeedsResult TreeDataCareObtainingSeedsResult[] @relation(name: "TreeDataCareObtainingSeedsTopVotedContent")

  @@unique([userId, treeDataId])
}

model TreeDataCareObtainingSeedsVote {
  id         String                            @id @default(uuid())
  content    TreeDataCareObtainingSeedsContent @relation(name: "TreeDataCareObtainingSeedsContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                          @relation(name: "TreeDataCareObtainingSeedsVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                              @relation(name: "UserTreeDataCareObtainingSeedsVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareObtainingSeedsResult {
  id                                  String                             @id @default(uuid())
  treeData                            TreeData?                          @relation(name: "TreeDataCareObtainingSeedsResult")
  content                             TreeDataCareObtainingSeedsContent? @relation(name: "TreeDataCareObtainingSeedsTopVotedContent", fields: [treeDataCareObtainingSeedsContentId], references: [id])
  treeDataCareObtainingSeedsContentId String?
}

model TreeDataCareHowToPlantSeedsContent {
  id                                String                              @id @default(uuid())
  treeData                          TreeData                            @relation(name: "TreeDataCareHowToPlantSeedsContents", fields: [treeDataId], references: [id])
  treeDataId                        Int
  user                              User                                @relation(name: "UserTreeDataCareHowToPlantSeedsContent", fields: [userId], references: [id])
  userId                            String
  content                           String
  votes                             TreeDataCareHowToPlantSeedsVote[]   @relation(name: "TreeDataCareHowToPlantSeedsContentToVotes")
  treeDataCareHowToPlantSeedsResult TreeDataCareHowToPlantSeedsResult[] @relation(name: "TreeDataCareHowToPlantSeedsTopVotedContent")
  reportedAt                        DateTime?

  @@unique([userId, treeDataId])
}

model TreeDataCareHowToPlantSeedsVote {
  id         String                             @id @default(uuid())
  content    TreeDataCareHowToPlantSeedsContent @relation(name: "TreeDataCareHowToPlantSeedsContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                           @relation(name: "TreeDataCareHowToPlantSeedsVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                               @relation(name: "UserTreeDataCareHowToPlantSeedsVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareHowToPlantSeedsResult {
  id                                   String                              @id @default(uuid())
  treeData                             TreeData?                           @relation(name: "TreeDataCareHowToPlantSeedsResult")
  content                              TreeDataCareHowToPlantSeedsContent? @relation(name: "TreeDataCareHowToPlantSeedsTopVotedContent", fields: [treeDataCareHowToPlantSeedsContentId], references: [id])
  treeDataCareHowToPlantSeedsContentId String?
}

model TreeDataCareGerminationDifficultyVote {
  id         String                                @id @default(uuid())
  treeData   TreeData                              @relation(name: "TreeDataCareGerminationDifficultyVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                                  @relation(name: "UserTreeDataCareGerminationDifficultyVote", fields: [userId], references: [id])
  userId     String
  type       TREE_CARE_GERMINATION_DIFFICULTY_TYPE

  @@unique([userId, treeDataId])
}

model TreeDataCareGerminationDifficultyResult {
  id       String    @id @default(uuid())
  treeData TreeData? @relation(name: "TreeDataCareGerminationDifficultyResult")
  count    Int
  easy     Int
  moderate Int
  hard     Int
}

enum TREE_CARE_GERMINATION_DIFFICULTY_TYPE {
  EASY
  MODERATE
  HARD
}

model TreeDataCareGerminationNotesContent {
  id                                 String                               @id @default(uuid())
  treeData                           TreeData                             @relation(name: "TreeDataCareGerminationNotesContents", fields: [treeDataId], references: [id])
  treeDataId                         Int
  user                               User                                 @relation(name: "UserTreeDataCareGerminationNotesContent", fields: [userId], references: [id])
  userId                             String
  content                            String
  votes                              TreeDataCareGerminationNotesVote[]   @relation(name: "TreeDataCareGerminationNotesContentToVotes")
  treeDataCareGerminationNotesResult TreeDataCareGerminationNotesResult[] @relation(name: "TreeDataCareGerminationNotesTopVotedContent")
  reportedAt                         DateTime?

  @@unique([userId, treeDataId])
}

model TreeDataCareGerminationNotesVote {
  id         String                              @id @default(uuid())
  content    TreeDataCareGerminationNotesContent @relation(name: "TreeDataCareGerminationNotesContentToVotes", fields: [contentId], references: [id])
  contentId  String
  treeData   TreeData                            @relation(name: "TreeDataCareGerminationNotesVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User                                @relation(name: "UserTreeDataCareGerminationNotesVote", fields: [userId], references: [id])
  userId     String

  @@unique([userId, treeDataId])
}

model TreeDataCareGerminationNotesResult {
  id                                    String                               @id @default(uuid())
  treeData                              TreeData?                            @relation(name: "TreeDataCareGerminationNotesResult")
  content                               TreeDataCareGerminationNotesContent? @relation(name: "TreeDataCareGerminationNotesTopVotedContent", fields: [treeDataCareGerminationNotesContentId], references: [id])
  treeDataCareGerminationNotesContentId String?
}

model TreeDataCareWhenToReleaseVote {
  id         String   @id @default(uuid())
  treeData   TreeData @relation(name: "TreeDataCareWhenToReleaseVotes", fields: [treeDataId], references: [id])
  treeDataId Int
  user       User     @relation(name: "UserTreeDataCareWhenToReleaseVote", fields: [userId], references: [id])
  userId     String
  jan        Boolean
  feb        Boolean
  mar        Boolean
  apr        Boolean
  may        Boolean
  jun        Boolean
  jul        Boolean
  aug        Boolean
  sep        Boolean
  oct        Boolean
  nov        Boolean
  dec        Boolean

  @@unique([userId, treeDataId])
}

model TreeDataCareWhenToReleaseResult {
  id       String    @id @default(uuid())
  treeData TreeData? @relation(name: "TreeDataCareWhenToReleaseResult")
  count    Int
  jan      Int
  feb      Int
  mar      Int
  apr      Int
  may      Int
  jun      Int
  jul      Int
  aug      Int
  sep      Int
  oct      Int
  nov      Int
  dec      Int
}

model Tree {
  id              String        @id @default(uuid())
  name            String
  cultivationDate DateTime      @default(now())
  creator         User          @relation(name: "UserTreesCreated", fields: [creatorId], references: [id])
  creatorId       String
  treeData        TreeData      @relation(name: "TreeDataToTrees", fields: [treeDataId], references: [id])
  treeDataId      Int
  followers       User[]        @relation("UserTreesFollowing")
  comments        TreeComment[]
  entries         TreeEntry[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TreeComment {
  id        String   @id @default(uuid())
  comment   String
  tree      Tree     @relation(fields: [treeId], references: [id])
  treeId    String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime @default(now())
}

model TreeEntry {
  id        String             @id @default(uuid())
  notes     String
  tree      Tree               @relation(fields: [treeId], references: [id])
  treeId    String
  image     File?
  comments  TreeEntryComment[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model TreeEntryComment {
  id          String    @id @default(uuid())
  comment     String
  treeEntry   TreeEntry @relation(fields: [treeEntryId], references: [id])
  treeEntryId String
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime  @default(now())
}
